#!/bin/bash 

## INTERNAL SCRIPT FOR USE INSIDE OF DOCKER CONTAINER

CMD=`basename $0`
export GOPATH=`go env GOPATH`
export PATH=$PATH:$GOPATH/bin

if [ $# -ne 2 ]; then
	echo "
USAGE: sh $CMD <APPDIR_IN_DOCKER> <APPDIR_ON_DISK>

Setup files will be added to the destination folder APPDIR_IN_DOCKER/APPDIR_ON_DISK and imports a small set of lexicon data needed for the Wikispeech startup tests.
" >&2
	exit 1
fi
APPDIR=$1
LOCALDIR=$2


echo "[$CMD] APPDIR=$APPDIR" >&2
echo "[$CMD] LOCALDIR=$LOCALDIR" >&2

function do_setup {
    if [ -d $APPDIR/symbol_sets ] ; then
	echo "[$CMD] APPDIR <$LOCALDIR> is already configured. No setup needed." >&2
    fi


    if [ -z "$GOPATH" ] ; then
	echo "[$CMD] The GOPATH environment variable is required!" >&2
	exit 1
    fi

    ### LEXDATA PREPS

    echo "[$CMD] Setting up basic files in LEXDATA dir $LOCALDIR ($APPDIR inside docker)... " >&2

    mkdir -p $APPDIR || exit 1
    mkdir -p $APPDIR/symbol_sets || exit 1

    cp $GOPATH/src/github.com/stts-se/pronlex/lexserver/demo_files/*.sym $APPDIR/symbol_sets/ || exit 1
    cp $GOPATH/src/github.com/stts-se/pronlex/lexserver/demo_files/*.cnv $APPDIR/symbol_sets/ || exit 1
    echo "" >> $APPDIR/symbol_sets/mappers.txt || exit 1
    cat $GOPATH/src/github.com/stts-se/pronlex/lexserver/demo_files/mappers.txt >> $APPDIR/symbol_sets/mappers.txt || exit 1


    ### COMPLETED

    echo "[$CMD] COMPLETED" >&2
}



### LEXDATA SETUP
do_setup

### LEXDATA PATHS

LEXDB=wikispeech_testdb.db
if [ -e $APPDIR/db_files/$LEXDB ]; then
    echo "[$CMD] cannot create db if it already exists: $LOCALDIR/db_files/$LEXDB" >&2
    exit 1
fi

if createEmptyDB $APPDIR/db_files/$LEXDB ; then
    echo "[$CMD] created empty db: $LOCALDIR/db_files/$LEXDB" >&2
else
    echo "[$CMD] couldn't create empty db: $LOCALDIR/db_files/$LEXDB" >&2
    exit 1
fi


nConverters=`ls $APPDIR/lexdata/convertersx/*.cnv 2> /dev/null |wc -l`
nSymSets=`ls $APPDIR/lexdata/*/*/*.sym 2> /dev/null |wc -l`
if [ -d "$APPDIR/lexdata" ] && [ $nSymSets != 0 ] || [ $nConverters != 0 ]; then
    cd $APPDIR/lexdata && git pull && cd -
    KEEP=1
else
    if git clone https://github.com/stts-se/lexdata.git $APPDIR/lexdata.git; then
	echo -n "" # OK
    else
	echo "[$CMD] git clone failed" >&2
	exit 1
    fi
fi

mkdir -p $APPDIR/db_files || exit 1
mkdir -p $APPDIR/symbol_sets || exit 1

cp $APPDIR/lexdata.git/*/*/*.sym $APPDIR/symbol_sets/ || exit 1
echo "" >> $APPDIR/symbol_sets/mappers.txt || exit 1
cat $APPDIR/lexdata.git/mappers.txt >> $APPDIR/symbol_sets/mappers.txt || exit 1
cp $APPDIR/lexdata.git/converters/*.cnv $APPDIR/symbol_sets/ || exit 1


### LEXDATA IMPORT

echo "" >&2
echo "IMPORT: $LEXDB:sv" >&2

if createEmptyDB $APPDIR/db_files/$LEXDB ; then
    if zcat $APPDIR/lexdata.git/sv-se/nst/swe030224NST.pron-ws.utf8.gz | egrep -wi "apa|hund|färöarna|det|här|är|ett|test" > $APPDIR/lexdata.git/sv-se/nst/swe030224NST.pron-ws.utf8.for_testing && importLex $APPDIR/db_files/$LEXDB sv $APPDIR/lexdata.git/sv-se/nst/swe030224NST.pron-ws.utf8.for_testing sv-se_ws-sampa $APPDIR/symbol_sets ; then
	echo -n ""
    else
	echo "$LEXDB FAILED" >&2
	exit 1
    fi
else
    echo "$LEXDB FAILED" >&2
    exit 1
fi

echo "" >&2
echo "IMPORT: $LEXDB:enu" >&2
if createEmptyDB $APPDIR/db_files/$LEXDB ; then 
    if cat $APPDIR/lexdata.git/en-us/cmudict/cmudict-0.7b-ws.utf8 | egrep -wi "test|a|children" > $APPDIR/lexdata.git/en-us/cmudict/cmudict-0.7b-ws.utf8.for_testing && importLex $APPDIR/db_files/$LEXDB enu $APPDIR/lexdata.git/en-us/cmudict/cmudict-0.7b-ws.utf8.for_testing en-us_ws-sampa $APPDIR/symbol_sets ; then
	echo -n ""
    else
	echo "$LEXDB FAILED" >&2
	exit 1
    fi
else
    echo "$LEXDB FAILED" >&2
    exit 1
fi

echo "" >&2
echo "IMPORT: $LEXDB:ar" >&2
if createEmptyDB $APPDIR/db_files/$LEXDB ; then
    if importLex $APPDIR/db_files/$LEXDB ar $APPDIR/lexdata.git/ar/TEST/ar_TEST.pron-ws.utf8 ar_ws-sampa $APPDIR/symbol_sets ; then
	echo -n ""
    else
	echo "$LEXDB FAILED" >&2
	exit 1
    fi
else
    echo "$LEXDB FAILED" >&2
    exit 1
fi

echo "[$CMD] Clearing lexdata cache" >&2
rm -fr $APPDIR/lexdata.git

echo "[$CMD] Done. BYE!" >&2


